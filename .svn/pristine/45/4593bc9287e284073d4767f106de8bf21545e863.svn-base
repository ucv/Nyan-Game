/**
 * Joueur
 */
define([
	"jquery",
	"src/utils/Config",
	"src/utils/debug/Debug",
	"src/utils/assetsmanager/SpriteManager",
	"src/utils/assetsmanager/SoundManager",
	"src/utils/math/Vector2",
	"src/game/game/MapManager",
	"src/game/game/box/BoxManager",
	"src/game/controller/Controller",
	"src/game/game/Pathfinding"
],
function (
	$,
	Config,
	Debug,
	SpriteManager,
	SoundManager,
	Vector2,
	MapManager,
	BoxManager,
	Controller,
	Pathfinding
) {
	var Player = function () {

	}


	Player.prototype.init = function () {
		this.modifier = {
			currentCell: [
				[MapManager.cell.player, MapManager.cell.floor],
				[MapManager.cell.playerOnGoal, MapManager.cell.goal]
			],
			nextCell: [
				[MapManager.cell.floor, MapManager.cell.player],
				[MapManager.cell.goal, MapManager.cell.playerOnGoal]
			]
		}

		this.position = this.getPlayerPos();
		this.xOffset = -18;
		this.yOffset = 6;
		this.moveQueue  = [];

		this.translateOffset = new Vector2(0, 0);


	}


	Player.prototype.update = function () {
		if (this.position.x == -1 ||
			this.position.y == -1) {
			this.position = this.getPlayerPos();
		}
		if (MapManager.currentMap.length == 0) {
			this.position.x = -1;
			this.position.y = -1;
		}

		// Update controller & rotation
		var direction = ["left", "right", "up", "down"];
		var rotation = [180, 0, 270, 90];
		for (var i = 0; i < direction.length; i++) {
			if (Controller[direction[i]]) {
				this.move(direction[i]);
				Controller[direction[i]] = 0;
				$('#player').css({transform: 'rotate(' + rotation[i] + 'deg)'});
				if (rotation[i] == 180) {
					$('#player').css({transform: 'rotate(0deg)'});
					$('#player').css({transform: 'scale(-1, 1)'});
				}
			}
		};


		// Update position
		if (MapManager.currentMap.length > 0) {
			$("#player").fadeIn( Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin) );
			$("#player").css("left", this.xOffset + this.translateOffset.x + Config.mapWidth * this.position.x)
						.css("top", this.yOffset + this.translateOffset.y + Config.mapHeight * this.position.y);
		} else {
			$("#player").fadeOut( Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin) );
		}

		// Update translation pour les mouvement fluide
		if (Math.abs(this.translateOffset.x) > Config.translationSpeed + 1) {
			this.translateOffset.x += Config.translationSpeed * this.translateOffset.x / Math.abs(this.translateOffset.x) * -1;
		} else {
			this.translateOffset.x = 0;
		}
		if (Math.abs(this.translateOffset.y) > Config.translationSpeed + 1) {
			this.translateOffset.y += Config.translationSpeed * this.translateOffset.y / Math.abs(this.translateOffset.y) * -1;
		} else {
			this.translateOffset.y = 0;
		}
	}


	/**
	 * Récupère la position du joueur
	 * Return Vector2 position x et y
	 */
	Player.prototype.getPlayerPos = function () {
		var currentMap = MapManager.currentMap;
		for (var i = 0; i < currentMap.length; i++) {
			if (currentMap[i] == MapManager.cell.player ||
				currentMap[i] == MapManager.cell.playerOnGoal) {
				return new Vector2((i % Config.mapSizeX), Math.floor(i / Config.mapSizeY));
			}
		}
		return new Vector2(-1, -1);
	}


	/**
	 * Fait bouger le joueur dans la direction donné.
	 * @dir Direction, "left", "right", "up", "down" accepté.
	 * @y Permet de d'avoir la destination x, y. (Dans ce cas la, dir sera égale à x)
	 */
	Player.prototype.move = function (dir, y) {
		if (typeof y == "undefined") {
			if (Math.abs(this.translateOffset.x) + Math.abs(this.translateOffset.y) == 0) {
				var map = MapManager.currentMap;
				var xOffset = 0;
				var yOffset = 0;

				switch(dir){
					case "left":
						xOffset = -1;
						break;
					case "right":
						xOffset = 1;
						break;
					case "up":
						yOffset = -1;
						break;
					case "down":
						yOffset = 1;
						break;
					default:
						console.error("Mauvaise direction ! Accepté : left, right, up, down. Entré : " + dir)
						break;
				}

				var canMove = false;
				var currentCellId = MapManager.getCellId(this.position.x, this.position.y);
				var currentCellValue = MapManager.getCellValue(this.position.x, this.position.y);
				var nextCellId = MapManager.getCellId(this.position.x + xOffset, this.position.y + yOffset);
				var nextCellValue = MapManager.getCellValue(this.position.x + xOffset, this.position.y + yOffset);

				if (nextCellValue == MapManager.cell.box ||
					nextCellValue == MapManager.cell.boxOnGoal) {
					var box = BoxManager.getByXY(this.position.x + xOffset, this.position.y + yOffset);
					var boxCanMove = box.move(dir);
					if (boxCanMove) {
						nextCellValue = MapManager.getCellValue(this.position.x + xOffset, this.position.y + yOffset);				
					} else {
						return false;
					}
				}

				for (var i = 0; i < this.modifier.nextCell.length; i++) {
					if (this.modifier.nextCell[i][0] == nextCellValue) {
						map[nextCellId] = this.modifier.nextCell[i][1]
						canMove = true;
					}
				};

				if (!canMove) return false;

				for (var i = 0; i < this.modifier.currentCell.length; i++) {
					if (this.modifier.currentCell[i][0] == currentCellValue) {
						map[currentCellId] = this.modifier.currentCell[i][1];
					}
				};

				this.position.x += xOffset;
				this.position.y += yOffset;
				this.translateOffset.x = xOffset * Config.mapWidth * -1;
				this.translateOffset.y = yOffset * Config.mapHeight * -1;

				SoundManager.play("meow" + Math.floor(Math.random() * 15))

				return true;
			}
			return false;
		} else {
			var destinationPos = new Vector2(dir, y);
			this.moveQueue = Pathfinding.find(this.position, destinationPos, MapManager.currentMap);
		}
	}	


	return new Player();
});