/**
 * Joueur
 */
define([
	"jquery",
	"src/utils/Config",
	"src/utils/debug/Debug",
	"src/utils/assetsmanager/SpriteManager",
	"src/utils/assetsmanager/SoundManager",
	"src/utils/math/Vector2",
	"src/game/game/MapManager",
	"src/game/controller/Controller"
],
function (
	$,
	Config,
	Debug,
	SpriteManager,
	SoundManager,
	Vector2,
	MapManager,
	Controller
) {
	var Player = function () {

	}


	Player.prototype.init = function () {
		this.position = this.getPlayerPos();
		this.xOffset = -18;
		this.yOffset = 6;

		$("#mapContainer").append("<div id='player'></div>")
		$("#player").css("background-image", "url(" + SpriteManager.get("player").src + ")")
					.css("left", this.xOffset + Config.mapWidth * this.position.x)
					.css("top", this.yOffset + Config.mapHeight * this.position.y)
					.css("width", 141 * Math.max(Config.mapWidth, Config.mapHeight) / 110)
					.css("height", 87 * Math.max(Config.mapWidth, Config.mapHeight) / 110);
	}


	Player.prototype.update = function () {
		if (this.position.x == -1 ||
			this.position.y == -1) {
			this.position = this.getPlayerPos();
		}
		if (MapManager.currentMap.length == 0) {
			this.position.x = -1;
			this.position.y = -1;
		}

		// Update controller & rotation
		var direction = ["left", "right", "up", "down"];
		var rotation = [180, 0, 270, 90];
		for (var i = 0; i < direction.length; i++) {
			if (Controller[direction[i]]) {
				this.move(direction[i]);
				Controller[direction[i]] = 0;
				$('#player').css({transform: 'rotate(' + rotation[i] + 'deg)'});
				if (rotation[i] == 180) {
					$('#player').css({transform: 'rotate(0deg)'});
					$('#player').css({transform: 'scale(-1, 1)'});
				}
			}
		};

		// Update position
		if (MapManager.currentMap.length > 0) {
			$("#player").fadeIn( Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin) );
			$("#player").css("left", this.xOffset + Config.mapWidth * this.position.x)
						.css("top", this.yOffset + Config.mapHeight * this.position.y);
		} else {
			$("#player").fadeOut( Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin) );
		}
	}


	/**
	 * Récupère la position du joueur
	 * Return Vector2 position x et y
	 */
	Player.prototype.getPlayerPos = function () {
		var currentMap = MapManager.currentMap;
		for (var i = 0; i < currentMap.length; i++) {
			if (currentMap[i] == 13) {
				return new Vector2((i % Config.mapSizeX), Math.floor(i / Config.mapSizeY));
			}
		}
		return new Vector2(-1, -1);
	}


	/**
	 * Fait bouger le joueur dans la direction donné.
	 * @dir Direction, "left", "right", "up", "down" accepté.
	 */
	Player.prototype.move = function (dir) {
		var currentMap = MapManager.currentMap;
		var xOffset = 0;
		var yOffset = 0;
		switch(dir){
			case "left":
				xOffset = -1;
				break;
			case "right":
				xOffset = 1;
				break;
			case "up":
				yOffset = -1;
				break;
			case "down":
				yOffset = 1;
				break;
			default:
				console.error("Mauvaise direction ! Accepté : left, right, up, down. Entré : " + dir)
				break;
		}
		var cellValue = MapManager.getCellValue(this.position.x + xOffset, this.position.y + yOffset);
		if (cellValue == MapManager.cell.floor) {
			var temp = currentMap[MapManager.getCellId(this.position.x, this.position.y)]
			currentMap[MapManager.getCellId(this.position.x, this.position.y)] = currentMap[MapManager.getCellId(this.position.x + xOffset, this.position.y + yOffset)]
			currentMap[MapManager.getCellId(this.position.x + xOffset, this.position.y + yOffset)] = temp;
			this.position.x += xOffset;
			this.position.y += yOffset;
		}
		SoundManager.play("meow" + Math.floor(Math.random() * 15))
	}
	


	return new Player();
});