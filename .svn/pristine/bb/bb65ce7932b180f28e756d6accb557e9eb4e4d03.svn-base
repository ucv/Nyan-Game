/**
 * Class qui permet de charger les maps
 */
define([
	"jquery",
	"src/utils/Config",
	"src/utils/assetsmanager/SpriteManager",
	"src/utils/math/Vector2",
	"src/game/game/box/Box",
	"src/game/game/box/BoxManager",
	"assets/map/level1",
	"assets/map/level2",
	"assets/map/level3",
	"assets/map/level4",
	"assets/map/level5"
],
function (
	$,
	Config,
	SpriteManager,
	Vector2,
	Box,
	BoxManager,
	level1,
	level2,
	level3,
	level4,
	level5
) {
	var MapManager = function () {
		this.currentMap = [];
		this.mapHistory = [];
		this.cell = {
			void: 0,
			floor: 1,
			wall: 2,
			goal: 4,
			box: 3,
			boxOnGoal: 7,
			player: 5,
			playerOnGoal: 6
		}
	}


	/**
	 * Charge une map et l'affiche sur le jeu
	 */
	MapManager.prototype.loadMap = function (name) {
		this.currentMap = [];
		var imageName = "";
		var map = eval(name);
		Config.mapSizeX = Math.sqrt(map.layers[0].data.length);
		Config.mapSizeY = Math.sqrt(map.layers[0].data.length);

		$("#gameContainer").append("<div id='mapContainer'></div>")

		for (var i = 0; i < map.layers[0].data.length; i++) {
			this.currentMap.push(map.layers[0].data[i]);
			switch (map.layers[0].data[i]) {
				case this.cell.void:
					imageName = "void";
					break;
				case this.cell.wall:
					imageName = "wall";
					break;
				case this.cell.floor:
					imageName = "floor";
					break;
				case this.cell.goal:
					imageName = "goal";
					break;
				case this.cell.box:
					imageName = "floor";
					new Box((i % Config.mapSizeX), Math.floor(i / Config.mapSizeY), false, this);
					break;
				case this.cell.boxOnGoal:
					imageName = "goal";
					new Box((i % Config.mapSizeX), Math.floor(i / Config.mapSizeY), true, this);
					break;
				case this.cell.playerOnGoal:
					imageName = "goal";
					break;
				case this.cell.player:
					imageName = "floor";
					break;
			}
			if (map.layers[0].data[i] == this.cell.playerOnGoal ||
				map.layers[0].data[i] == this.cell.player) {
				$("#mapContainer").append("<div id='player'></div>")
					$("#player").css("background-image", "url(" + SpriteManager.get("player").src + ")")
								.css("width", 141 * Math.max(Config.mapWidth, Config.mapHeight) / 110)
								.css("height", 87 * Math.max(Config.mapWidth, Config.mapHeight) / 110);
			}

			$('#mapContainer').append('<div id="tile' + i + '" class="' + imageName + ' tile"></div>');
			$('#tile' + i).css("background-image", "url(" + SpriteManager.get(imageName).src + ")");
			$('#tile' + i).css("left", Config.mapWidth * (i % Config.mapSizeX))
						  .css("top", Config.mapHeight * Math.floor(i / Config.mapSizeY))
						  .css("width", Config.mapWidth)
						  .css("height", Config.mapHeight);

			$('#tile' + i).mouseup((function (i) {
				return function () {
					//console.log(i % Config.mapSizeX);
					//console.log(Math.floor(i / Config.mapSizeY));
				}
			})(i));

			$('#tile' + i).hide();
			setTimeout((function (id) {
				return function () {
					$('#tile' + id).fadeIn(400);
				};
			})(i), Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin));
		}
	}


	/**
	 * Détruit la map actuel
	 */
	MapManager.prototype.removeMap = function () {
		for (var i = 0; i < this.currentMap.length; i++) {
			setTimeout((function (id) {
				return function () {
					$('#tile' + id).fadeOut(400, function () {
						$('#tile' + id).remove();
					});
				};
			})(i), Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin));
		}
		BoxManager.destroyAll();
		this.currentMap = [];
	}


	/**
	  * Return la valeur d'une case
	  * @x Abcisse de la case
	  * @y Ordonnée de la case
	  */
	MapManager.prototype.getCellValue = function (x, y) {
		if (x < 0 || x > Config.mapSizeX - 1 || y < 0 || y > Config.mapSizeY - 1) return this.cell.wall;
		return this.currentMap[(y % Config.mapSizeX) * Config.mapSizeX + x];
	}


	/**
	 * Retourne l'id de la case ce trouvant à la position x et y
	 */
	MapManager.prototype.getCellId = function (x, y) {
		return (y % Config.mapSizeX) * Config.mapSizeX + x;
	}
	

	return new MapManager();
});