/**
 * Caisse du sokoban
 */
define([
	"jquery",
	"src/game/game/box/BoxManager",
	"src/utils/assetsmanager/SpriteManager",
	"src/utils/math/Vector2",
	"src/utils/Config"
],
function (
	$,
	BoxManager,
	SpriteManager,
	Vector2,
	Config
) {
	var Box = function (x, y, MapManager) {
		this.modifier = {
			currentCell: [
				[MapManager.cell.box, MapManager.cell.floor],
				[MapManager.cell.boxOnGoal, MapManager.cell.goal]
			],
			nextCell: [
				[MapManager.cell.floor, MapManager.cell.box],
				[MapManager.cell.goal, MapManager.cell.boxOnGoal]
			]
		}

		this.MapManager = MapManager;
		BoxManager.list.push(this);
		
		this.position = new Vector2(x, y);
		this.id = Math.floor(Math.random() * 10000000);

		$("#mapContainer").append("<div id='box" + this.id + "' class='box'></div>");
		$("#box" + this.id).css("background-image", "url(" + SpriteManager.get("caisse").src + ")")
							 .css("width", Config.mapWidth)
						 	 .css("height", Config.mapHeight);
		$('#box' + this.id).hide();
		setTimeout((function (id) {
			return function () {
				$('#box' + id).fadeIn(400);
			};
		})(this.id), Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin));

	}


	Box.prototype.update = function () {
		$("#box" + this.id).fadeIn( Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin) );
		$("#box" + this.id).css("left", Config.mapWidth * this.position.x)
							 .css("top", Config.mapHeight * this.position.y);
	}


	/**
	 * Bouge la caisse dans la direction donné.
	 * @return true si la caisse a bougé sinon false
	 */
	Box.prototype.move = function (dir) {
		var currentMap = this.MapManager.currentMap;
		var xOffset = 0;
		var yOffset = 0;
		switch(dir) {
			case "left":
				xOffset = -1;
				break;
			case "right":
				xOffset = 1;
				break;
			case "up":
				yOffset = -1;
				break;
			case "down":
				yOffset = 1;
				break;
			default:
				console.error("Mauvaise direction ! Accepté : left, right, up, down. Entré : " + dir)
				break;
		}
		var cellValue = this.MapManager.getCellValue(this.position.x + xOffset, this.position.y + yOffset);
		if (cellValue == 1) {
			var temp = currentMap[MapManager.getCellId(this.position.x, this.position.y)]
			currentMap[MapManager.getCellId(this.position.x, this.position.y)] = currentMap[MapManager.getCellId(this.position.x + xOffset, this.position.y + yOffset)]
			currentMap[MapManager.getCellId(this.position.x + xOffset, this.position.y + yOffset)] = temp;
			this.position.x += xOffset;
			this.position.y += yOffset;
			return true;
		}
		if (cellValue == 72) {
			if (currentMap[MapManager.getCellId(this.position.x, this.position.y)] == 66) {
				currentMap[MapManager.getCellId(this.position.x, this.position.y)] = 72;
			} else {
				currentMap[MapManager.getCellId(this.position.x, this.position.y)] = 1;
			}
			this.position.x += xOffset;
			this.position.y += yOffset;
			return true
		}
		return false;
	}


	Box.prototype.destroy = function () {
		setTimeout((function (id) {
			return function () {
				$('#box' + id).fadeOut(400, function () {
					$('#box' + id).remove();
				});
			};
		})(this.id), Config.fadeInMin + Math.random() * (Config.fadeInMax - Config.fadeInMin));
	}


	return Box;
});